-- MySQL Script generated by MySQL Workbench
-- Fri Dec  8 18:19:53 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema filharmonija
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `filharmonija` ;

-- -----------------------------------------------------
-- Schema filharmonija
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `filharmonija` DEFAULT CHARACTER SET utf8 ;
USE `filharmonija` ;

-- -----------------------------------------------------
-- Table `Osoblje`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Osoblje` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `jmbg` BIGINT NOT NULL,
  `ime` VARCHAR(45) NOT NULL,
  `prezime` VARCHAR(45) NOT NULL,
  `adresa` VARCHAR(45) NOT NULL,
  `plata` INT,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Izvodjac`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Izvodjac` (
  `Osoblje_id` INT NOT NULL,
  `instrument` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Osoblje_id`),
  CONSTRAINT `fk_table1_Osoblje`
    FOREIGN KEY (`Osoblje_id`)
    REFERENCES `Osoblje` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Dirigent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Dirigent` (
  `Osoblje_id` INT NOT NULL,
  `godineIskustva` INT NOT NULL,
  `konzervatorijum` VARCHAR(45) NOT NULL,
  `penzija` BOOLEAN NOT NULL,
  PRIMARY KEY (`Osoblje_id`),
  CONSTRAINT `fk_table2_Osoblje1`
    FOREIGN KEY (`Osoblje_id`)
    REFERENCES `Osoblje` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Higijenicar`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Higijenicar` (
  `Osoblje_id` INT NOT NULL,
  `strucnaSprema` VARCHAR(45) NOT NULL,
  `sindikat` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Osoblje_id`),
  CONSTRAINT `fk_table3_Osoblje1`
    FOREIGN KEY (`Osoblje_id`)
    REFERENCES `Osoblje` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Blagajna`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Blagajna` (
  `id` INT NOT NULL,
  `radnoVreme` TIME NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Blagajnik`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Blagajnik` (
  `Osoblje_id` INT NOT NULL,
  `Blagajna_id` INT NOT NULL,
  `preferiranaSmena` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Osoblje_id`),
  INDEX `fk_Blagajnik_Blagajna1_idx` (`Blagajna_id` ASC),
  CONSTRAINT `fk_table4_Osoblje1`
    FOREIGN KEY (`Osoblje_id`)
    REFERENCES `Osoblje` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Blagajnik_Blagajna1`
    FOREIGN KEY (`Blagajna_id`)
    REFERENCES `Blagajna` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KoncertnaSala`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KoncertnaSala` (
  `id` INT NOT NULL,
  `naziv` VARCHAR(45) NOT NULL,
  `brojMesta` INT NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Zaduzen`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Zaduzen` (
  `Higijenicar_Osoblje_id` INT NOT NULL,
  `KoncertnaSala_id` INT NOT NULL,
  PRIMARY KEY (`Higijenicar_Osoblje_id`, `KoncertnaSala_id`),
  INDEX `fk_Higijenicar_has_KoncertnaSala_KoncertnaSala1_idx` (`KoncertnaSala_id` ASC),
  INDEX `fk_Higijenicar_has_KoncertnaSala_Higijenicar1_idx` (`Higijenicar_Osoblje_id` ASC),
  CONSTRAINT `fk_Higijenicar_has_KoncertnaSala_Higijenicar1`
    FOREIGN KEY (`Higijenicar_Osoblje_id`)
    REFERENCES `Higijenicar` (`Osoblje_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Higijenicar_has_KoncertnaSala_KoncertnaSala1`
    FOREIGN KEY (`KoncertnaSala_id`)
    REFERENCES `KoncertnaSala` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kompozicija`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kompozicija` (
  `id` INT NOT NULL,
  `naziv` VARCHAR(45) NOT NULL,
  `kompozitor` VARCHAR(45) NOT NULL,
  `zemljaPorekla` VARCHAR(45) NOT NULL,
  `godinaPorekla` INT NOT NULL,
  `trajanje` INT NOT NULL,
  `brojCinova` INT NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cin`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Cin` (
  `id` INT NOT NULL,
  `Kompozicija_id` INT NOT NULL,
  `naziv` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`, `Kompozicija_id`),
  INDEX `fk_Cin_Kompozicija1_idx` (`Kompozicija_id` ASC),
  CONSTRAINT `fk_Cin_Kompozicija1`
    FOREIGN KEY (`Kompozicija_id`)
    REFERENCES `Kompozicija` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orkestar`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orkestar` (
  `id` INT NOT NULL,
  `naziv` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Pripada`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Pripada` (
  `Izvodjac_Osoblje_id` INT NOT NULL,
  `Orkestar_id` INT NOT NULL,
  PRIMARY KEY (`Izvodjac_Osoblje_id`, `Orkestar_id`),
  INDEX `fk_Izvodjac_has_Orkestar_Orkestar1_idx` (`Orkestar_id` ASC),
  INDEX `fk_Izvodjac_has_Orkestar_Izvodjac1_idx` (`Izvodjac_Osoblje_id` ASC),
  CONSTRAINT `fk_Izvodjac_has_Orkestar_Izvodjac1`
    FOREIGN KEY (`Izvodjac_Osoblje_id`)
    REFERENCES `Izvodjac` (`Osoblje_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Izvodjac_has_Orkestar_Orkestar1`
    FOREIGN KEY (`Orkestar_id`)
    REFERENCES `Orkestar` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Diriguje`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Diriguje` (
  `Dirigent_Osoblje_id` INT NOT NULL,
  `Orkestar_id` INT NOT NULL,
  PRIMARY KEY (`Dirigent_Osoblje_id`, `Orkestar_id`),
  INDEX `fk_Dirigent_has_Orkestar_Orkestar1_idx` (`Orkestar_id` ASC),
  INDEX `fk_Dirigent_has_Orkestar_Dirigent1_idx` (`Dirigent_Osoblje_id` ASC),
  CONSTRAINT `fk_Dirigent_has_Orkestar_Dirigent1`
    FOREIGN KEY (`Dirigent_Osoblje_id`)
    REFERENCES `Dirigent` (`Osoblje_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Dirigent_has_Orkestar_Orkestar1`
    FOREIGN KEY (`Orkestar_id`)
    REFERENCES `Orkestar` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Izvodi`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Izvodi` (
  `Kompozicija_id` INT NOT NULL,
  `Diriguje_Dirigent_Osoblje_id` INT NOT NULL,
  `Diriguje_Orkestar_id` INT NOT NULL,
  PRIMARY KEY (`Kompozicija_id`, `Diriguje_Dirigent_Osoblje_id`, `Diriguje_Orkestar_id`),
  INDEX `fk_Kompozicija_has_Diriguje_Diriguje1_idx` (`Diriguje_Dirigent_Osoblje_id` ASC, `Diriguje_Orkestar_id` ASC),
  INDEX `fk_Kompozicija_has_Diriguje_Kompozicija1_idx` (`Kompozicija_id` ASC),
  CONSTRAINT `fk_Kompozicija_has_Diriguje_Kompozicija1`
    FOREIGN KEY (`Kompozicija_id`)
    REFERENCES `Kompozicija` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Kompozicija_has_Diriguje_Diriguje1`
    FOREIGN KEY (`Diriguje_Dirigent_Osoblje_id` , `Diriguje_Orkestar_id`)
    REFERENCES `Diriguje` (`Dirigent_Osoblje_id` , `Orkestar_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Nastupa`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Nastupa` (
  `Izvodi_Kompozicija_id` INT NOT NULL,
  `Izvodi_Diriguje_Dirigent_Osoblje_id` INT NOT NULL,
  `Izvodi_Diriguje_Orkestar_id` INT NOT NULL,
  `KoncertnaSala_id` INT NOT NULL,
  `vreme` TIME NOT NULL,
  PRIMARY KEY (`KoncertnaSala_id`, `vreme`),
  INDEX `fk_Izvodi_has_KoncertnaSala_KoncertnaSala1_idx` (`KoncertnaSala_id` ASC),
  INDEX `fk_Izvodi_has_KoncertnaSala_Izvodi1_idx` (`Izvodi_Kompozicija_id` ASC, `Izvodi_Diriguje_Dirigent_Osoblje_id` ASC, `Izvodi_Diriguje_Orkestar_id` ASC),
  CONSTRAINT `fk_Izvodi_has_KoncertnaSala_Izvodi1`
    FOREIGN KEY (`Izvodi_Kompozicija_id` , `Izvodi_Diriguje_Dirigent_Osoblje_id` , `Izvodi_Diriguje_Orkestar_id`)
    REFERENCES `Izvodi` (`Kompozicija_id` , `Diriguje_Dirigent_Osoblje_id` , `Diriguje_Orkestar_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Izvodi_has_KoncertnaSala_KoncertnaSala1`
    FOREIGN KEY (`KoncertnaSala_id`)
    REFERENCES `KoncertnaSala` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


delimiter $$

-- ne sme se uneti plata manja od 0
CREATE TRIGGER osobljePlataCheckU
BEFORE UPDATE ON Osoblje
FOR EACH ROW
BEGIN
  IF new.plata <= 0
  THEN
    SIGNAL sqlstate '70000' SET message_text = 'Plata mora biti veca od 0';
  END IF;
END;
$$

CREATE TRIGGER osobljePlataCheckI
BEFORE INSERT ON Osoblje
FOR EACH ROW
BEGIN
  IF new.plata <= 0
  THEN
    SIGNAL sqlstate '70000' SET message_text = 'Plata mora biti veca od 0';
  END IF;
END;
$$


-- staz dirigenta mora biti veci od 5 godina
CREATE TRIGGER dirigentStazCheckI
BEFORE INSERT ON Dirigent
FOR EACH ROW
BEGIN
  IF new.godineIskustva <= 5
  THEN
    SIGNAL sqlstate '70000' SET message_text = 'Dirigent mora imati vise od 5 godina iskustva';
  END IF;
END;
$$

CREATE TRIGGER dirigentStazCheckU
BEFORE UPDATE ON Dirigent
FOR EACH ROW
BEGIN
  IF new.godineIskustva <= 5
  THEN
    SIGNAL sqlstate '70000' SET message_text = 'Dirigent mora imati vise od 5 godina iskustva';
  END IF;
END;
$$


-- smene moze biti samo jutro ili podne
CREATE TRIGGER blagajnikSmenaCheckU
BEFORE UPDATE ON Blagajnik
FOR EACH ROW
BEGIN
  IF new.preferiranaSmena NOT IN ('jutro', 'podne')
  THEN
    SIGNAL sqlstate '70000' SET message_text = 'Smena moze biti samo jutro ili podne';
  END IF;
END;
$$


CREATE TRIGGER blagajnikSmenaCheckI
BEFORE INSERT ON Blagajnik
FOR EACH ROW
BEGIN
  IF new.preferiranaSmena NOT IN ('jutro', 'podne')
  THEN
    SIGNAL sqlstate '70000' SET message_text = 'Smena moze biti samo jutro ili podne';
  END IF;
END;
$$


-- broj mesta mora biti bar 50
CREATE TRIGGER salaMestaCheckU
BEFORE UPDATE ON KoncertnaSala
FOR EACH ROW
BEGIN
  IF new.brojMesta < 50
  THEN
    SIGNAL sqlstate '70000' SET message_text = 'Sala ne sme imati manje od 50 mesta';
  END IF;
END;
$$

CREATE TRIGGER salaMestaCheckI
BEFORE INSERT ON KoncertnaSala
FOR EACH ROW
BEGIN
  IF new.brojMesta < 50
  THEN
    SIGNAL sqlstate '70000' SET message_text = 'Sala ne sme imati manje od 50 mesta';
  END IF;
END;
$$


-- povecati platu higijenicaru koji se potrudio da zavrsi visi nivo
CREATE TRIGGER afterUpdateOnHigijenicar
BEFORE UPDATE ON Higijenicar
FOR EACH ROW
BEGIN
  IF (old.strucnaSprema <> new.strucnaSprema) 
  THEN
    UPDATE Osoblje
    SET plata = plata + 5000
    WHERE id = new.Osoblje_id;
  END IF;
END;
$$


-- racunanje plate automatski, u zavisnosti od posla
CREATE TRIGGER beforeInsertOnIzvodjac
BEFORE INSERT ON Izvodjac
FOR EACH ROW
BEGIN
  UPDATE Osoblje
  SET plata = 70000
  WHERE id = new.Osoblje_id;
END;
$$

CREATE TRIGGER beforeInsertOnHigijenicar
BEFORE INSERT ON Higijenicar
FOR EACH ROW
BEGIN
  UPDATE Osoblje
  SET plata = 20000
  WHERE id = new.Osoblje_id;
END;
$$

CREATE TRIGGER beforeInsertOnDirigent
BEFORE INSERT ON Dirigent
FOR EACH ROW
BEGIN
  UPDATE Osoblje
  SET plata = 100000
  WHERE id = new.Osoblje_id;
END;
$$

CREATE TRIGGER beforeInsertOnBlagajnik
BEFORE INSERT ON Blagajnik
FOR EACH ROW
BEGIN
  UPDATE Osoblje
  SET plata = 40000
  WHERE id = new.Osoblje_id;
END;
$$


-- penzionisan dirigent ne sme da diriguje
CREATE TRIGGER beforeInsertOnDiriguje
BEFORE INSERT ON Diriguje
FOR EACH ROW
BEGIN
  IF new.Dirigent_Osoblje_id in (SELECT Osoblje_id FROM Dirigent WHERE penzija = 1)
  THEN
    SIGNAL sqlstate '70000' set message_text = 'Dirigent je penzionisan!';
  END IF;  
END;
$$


-- ne sme se uneti vise cinova od predodredjenog broja
CREATE TRIGGER beforeInsertOnCin
BEFORE INSERT ON Cin
FOR EACH ROW
BEGIN
  IF (SELECT COUNT(Kompozicija_id) FROM Cin WHERE Kompozicija_id = new.Kompozicija_id) 
    = (SELECT brojCinova FROM Kompozicija WHERE id = new.Kompozicija_id)
  THEN
    SIGNAL sqlstate '70000' set message_text = 'Vec su uneti svi cinovi!';
  END IF;  
END;
$$


-- smene se moraju poklapati
CREATE TRIGGER beforeInsertOnBlagajnikSmena
BEFORE INSERT ON Blagajnik
FOR EACH ROW 
BEGIN
  IF new.preferiranaSmena = 'jutro' 
  THEN
    IF (select radnoVreme from Blagajna where id = new.Blagajna_id) = '15:00:00'
    THEN
      -- DELETE FROM Osoblje WHERE id = new.Osoblje_id;
      SIGNAL sqlstate '70000' set message_text = 'Omasili ste smenu!';
    END IF;
  END IF;
  IF new.preferiranaSmena = 'podne'
  THEN 
    IF (select radnoVreme from Blagajna where id = new.Blagajna_id) = '09:00:00'
    THEN
      -- DELETE FROM Osoblje WHERE id = new.Osoblje_id;
      SIGNAL sqlstate '70000' set message_text = 'Omasili ste smenu!';
    END IF;
  END IF;
END;
$$